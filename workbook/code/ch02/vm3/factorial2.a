# factorial see https://en.wikipedia.org/wiki/Factorial

START:

   SET 10         # n = 15
   DUP
   STORE 0        # i = 15
   SET 1
   STORE 1        # fact = 1

LOOP:

   LOAD 0         # i
   LOAD 1         # fact
   MUL            # i * fact ->
   STORE 1        # -> fact
   LOAD 0         # i
   DEC            # --i
   DUP
   STORE 0        # -> i
   JPNZ :LOOP     # i â‰  0 ?

   LOAD 1         # fact
   PRINT
   HALT



    // Main function (starts at main:)
    main_set_n,      SET, 5,           // Set n = 5 (initial value for factorial)
    main_call_fact,  CALL, fact,       // Call factorial function at fact:
    main_print,      PRINT,            // Print result of factorial
    main_halt,       HALT,             // End of program

    // Factorial function (starts at fact:)
    fact_load_n,     LD, 0,            // Load n (argument of fact(n))
    fact_check_base, EQZ,              // If n == 0
    fact_jump_base,  JPZ, base_case,   // Jump to return 1 if n == 0
    fact_load_n2,    LD, 0,            // Load n again
    fact_dup_n,      DUP,              // Duplicate n for multiplication
    fact_dec_n,      DEC,              // Decrement n (n-1)
    fact_store,      ST, 1,            // Store (n-1) in local variable 1
    fact_call_rec,   CALL, fact,       // Recursive call fact(n-1)
    fact_multiply,   MUL,              // Multiply n * fact(n-1)
    fact_return,     RET,              // Return result

    // Base case: fact(0) = 1 (starts at base_case:)
    base_case_set1,  SET, 1,           // Set return value to 1
    base_case_ret,   RET               // Return 1


    // Main function code (starts at pc=0)
    SET, 5,           // Set n = 5 (initial value for factorial)
    CALL, :FACT          // Call factorial function at pc=9
    PRINT,            // Print result of factorial
    HALT,             // End of program

    // Factorial function (starts at pc=9)
    LD, 0,            // Load n (argument of fact(n))
    EQZ,              // If n == 0
    JPZ, 17,          // Jump to return 1 if n == 0
    LD, 0,            // Load n again
    DUP,              // Duplicate n for multiplication
    DEC,              // Decrement n (n-1)
    ST, 1,            // Store (n-1) in local variable 1
    CALL, 9,          // Recursive call fact(n-1)
    MUL,              // Multiply n * fact(n-1)
    RET,              // Return result

    // Base case: fact(0) = 1
    SET, 1,           // Set return value to 1
    RET               // Return 1

